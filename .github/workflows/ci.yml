name: go-ci

on: [push]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: setup
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"
        id: go
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

  verify:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Get changed files in the docs folder
        id: buildpack-toml-changed
        uses: tj-actions/changed-files@v35
        with:
          files: buildpack.toml
      - name: verify-buildpack
        if: steps.buildpack-toml-changed.outputs.any_changed == 'true'
        run: go run verify.go

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build
        run: "./scripts/build.sh"
      - name: Archive binary
        uses: actions/upload-artifact@v3
        with:
          name: binary
          path: bin
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: go test -race -coverprofile=coverage.xml -covermode=atomic ./... -v
      - name: upload coverage
        uses: codecov/codecov-action@v1
        with:
          files: ./coverage.xml
          verbose: true

  lint:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.52.2

  create-package:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Docker login gcr.io
        if: ${{ (github.event_name != 'pull_request' || ! github.event.pull_request.head.repo.fork) && (github.actor != 'dependabot[bot]') }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Install crane
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "Installing crane ${CRANE_VERSION}"
          mkdir -p "${HOME}"/bin
          echo "${HOME}/bin" >> "${GITHUB_PATH}"
          curl \
            --show-error \
            --silent \
            --location \
            "https://github.com/google/go-containerregistry/releases/download/v${CRANE_VERSION}/go-containerregistry_Linux_x86_64.tar.gz" \
          | tar -C "${HOME}/bin" -xz crane
        env:
          CRANE_VERSION: 0.8.0
      - name: Install pack
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          echo "Installing pack ${PACK_VERSION}"
          mkdir -p "${HOME}"/bin
          echo "${HOME}/bin" >> "${GITHUB_PATH}"
          curl \
            --location \
            --show-error \
            --silent \
            "https://github.com/buildpacks/pack/releases/download/v${PACK_VERSION}/pack-v${PACK_VERSION}-linux.tgz" \
          | tar -C "${HOME}"/bin -xz pack
        env:
          PACK_VERSION: 0.27.0
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: binary
          path: bin
      - name: Create Package
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          mkdir -p "buildpack"
          cp -r bin "buildpack"
          cp -r buildpack.toml "buildpack"

      - name: Compute version
        id: version
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          if [ -z "${GITHUB_REF+set}" ]; then
            echo "GITHUB_REF set to [${GITHUB_REF-<unset>}], but should never be empty or unset"
            exit 255
          fi
          if [[ ${GITHUB_REF} =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION=${BASH_REMATCH[1]}
            MAJOR_VERSION="$(echo "${VERSION}" | awk -F '.' '{print $1 }')"
            MINOR_VERSION="$(echo "${VERSION}" | awk -F '.' '{print $1 "." $2 }')"

            echo "VERSION_MAJOR=${MAJOR_VERSION}" >> "${GITHUB_ENV}"
            echo "VERSION_MINOR=${MINOR_VERSION}" >> "${GITHUB_ENV}"
          elif [[ ${GITHUB_REF} =~ refs/heads/(.+) ]]; then
            VERSION=${BASH_REMATCH[1]}
          else
            VERSION=$(git rev-parse --short HEAD)
          fi
          echo "VERSION=${VERSION}" >> "${GITHUB_ENV}"
          echo "Selected ${VERSION} from
            * ref: ${GITHUB_REF}
            * sha: ${GITHUB_SHA}
          "

      - name: Create Buildpack
        run: |
          #!/usr/bin/env bash
          set -euo pipefail

          pack buildpack package \
            ${PACKAGE}:${VERSION} \
            --config package.toml \
            --format image \
            --publish

          if [[ -n ${VERSION_MINOR:-} && -n ${VERSION_MAJOR:-} ]]; then
            crane tag "${PACKAGE}:${VERSION}" "${VERSION_MINOR}"
            crane tag "${PACKAGE}:${VERSION}" "${VERSION_MAJOR}"
          fi
          crane tag "${PACKAGE}:${VERSION}" latest
        env:
          PACKAGE: "nncdevel/buildpack-newrelic-java-agent"
